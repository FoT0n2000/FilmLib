{"ast":null,"code":"import { UrlMatcherFactory } from './url/urlMatcherFactory';\nimport { UrlRouter } from './url/urlRouter';\nimport { TransitionService } from './transition/transitionService';\nimport { ViewService } from './view/view';\nimport { StateRegistry } from './state/stateRegistry';\nimport { StateService } from './state/stateService';\nimport { UIRouterGlobals } from './globals';\nimport { values, removeFrom } from './common/common';\nimport { isFunction } from './common/predicates';\nimport { UrlService } from './url/urlService';\nimport { trace } from './common/trace';\nimport { makeStub } from './common';\n/** @internal */\n\nvar _routerInstance = 0;\n/** @internal */\n\nvar locSvcFns = ['url', 'path', 'search', 'hash', 'onChange'];\n/** @internal */\n\nvar locCfgFns = ['port', 'protocol', 'host', 'baseHref', 'html5Mode', 'hashPrefix'];\n/** @internal */\n\nvar locationServiceStub = makeStub('LocationServices', locSvcFns);\n/** @internal */\n\nvar locationConfigStub = makeStub('LocationConfig', locCfgFns);\n/**\n * An instance of UI-Router.\n *\n * This object contains references to service APIs which define your application's routing behavior.\n */\n\nvar UIRouter =\n/** @class */\nfunction () {\n  /**\n   * Creates a new `UIRouter` object\n   *\n   * @param locationService a [[LocationServices]] implementation\n   * @param locationConfig a [[LocationConfig]] implementation\n   * @internal\n   */\n  function UIRouter(locationService, locationConfig) {\n    if (locationService === void 0) {\n      locationService = locationServiceStub;\n    }\n\n    if (locationConfig === void 0) {\n      locationConfig = locationConfigStub;\n    }\n\n    this.locationService = locationService;\n    this.locationConfig = locationConfig;\n    /** @internal */\n\n    this.$id = _routerInstance++;\n    /** @internal */\n\n    this._disposed = false;\n    /** @internal */\n\n    this._disposables = [];\n    /** Enable/disable tracing to the javascript console */\n\n    this.trace = trace;\n    /** Provides services related to ui-view synchronization */\n\n    this.viewService = new ViewService(this);\n    /** An object that contains global router state, such as the current state and params */\n\n    this.globals = new UIRouterGlobals();\n    /** A service that exposes global Transition Hooks */\n\n    this.transitionService = new TransitionService(this);\n    /**\n     * Deprecated for public use. Use [[urlService]] instead.\n     * @deprecated Use [[urlService]] instead\n     */\n\n    this.urlMatcherFactory = new UrlMatcherFactory(this);\n    /**\n     * Deprecated for public use. Use [[urlService]] instead.\n     * @deprecated Use [[urlService]] instead\n     */\n\n    this.urlRouter = new UrlRouter(this);\n    /** Provides services related to the URL */\n\n    this.urlService = new UrlService(this);\n    /** Provides a registry for states, and related registration services */\n\n    this.stateRegistry = new StateRegistry(this);\n    /** Provides services related to states */\n\n    this.stateService = new StateService(this);\n    /** @internal plugin instances are registered here */\n\n    this._plugins = {};\n\n    this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n    this.disposable(this.globals);\n    this.disposable(this.stateService);\n    this.disposable(this.stateRegistry);\n    this.disposable(this.transitionService);\n    this.disposable(this.urlService);\n    this.disposable(locationService);\n    this.disposable(locationConfig);\n  }\n  /** Registers an object to be notified when the router is disposed */\n\n\n  UIRouter.prototype.disposable = function (disposable) {\n    this._disposables.push(disposable);\n  };\n  /**\n   * Disposes this router instance\n   *\n   * When called, clears resources retained by the router by calling `dispose(this)` on all\n   * registered [[disposable]] objects.\n   *\n   * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n   *\n   * @internal\n   * @param disposable (optional) the disposable to dispose\n   */\n\n\n  UIRouter.prototype.dispose = function (disposable) {\n    var _this = this;\n\n    if (disposable && isFunction(disposable.dispose)) {\n      disposable.dispose(this);\n      return undefined;\n    }\n\n    this._disposed = true;\n\n    this._disposables.slice().forEach(function (d) {\n      try {\n        typeof d.dispose === 'function' && d.dispose(_this);\n        removeFrom(_this._disposables, d);\n      } catch (ignored) {}\n    });\n  };\n  /**\n   * Adds a plugin to UI-Router\n   *\n   * This method adds a UI-Router Plugin.\n   * A plugin can enhance or change UI-Router behavior using any public API.\n   *\n   * #### Example:\n   * ```js\n   * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n   *\n   * var plugin = router.addPlugin(MyCoolPlugin);\n   * ```\n   *\n   * ### Plugin authoring\n   *\n   * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n   *\n   * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n   * For example, it may configure router options or add a Transition Hook.\n   *\n   * The plugin can then be published as a separate module.\n   *\n   * #### Example:\n   * ```js\n   * export class MyAuthPlugin implements UIRouterPlugin {\n   *   constructor(router: UIRouter, options: any) {\n   *     this.name = \"MyAuthPlugin\";\n   *     let $transitions = router.transitionService;\n   *     let $state = router.stateService;\n   *\n   *     let authCriteria = {\n   *       to: (state) => state.data && state.data.requiresAuth\n   *     };\n   *\n   *     function authHook(transition: Transition) {\n   *       let authService = transition.injector().get('AuthService');\n   *       if (!authService.isAuthenticated()) {\n   *         return $state.target('login');\n   *       }\n   *     }\n   *\n   *     $transitions.onStart(authCriteria, authHook);\n   *   }\n   * }\n   * ```\n   *\n   * @param plugin one of:\n   *        - a plugin class which implements [[UIRouterPlugin]]\n   *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n   *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n   * @param options options to pass to the plugin class/factory\n   * @returns the registered plugin instance\n   */\n\n\n  UIRouter.prototype.plugin = function (plugin, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var pluginInstance = new plugin(this, options);\n    if (!pluginInstance.name) throw new Error('Required property `name` missing on plugin: ' + pluginInstance);\n\n    this._disposables.push(pluginInstance);\n\n    return this._plugins[pluginInstance.name] = pluginInstance;\n  };\n\n  UIRouter.prototype.getPlugin = function (pluginName) {\n    return pluginName ? this._plugins[pluginName] : values(this._plugins);\n  };\n\n  return UIRouter;\n}();\n\nexport { UIRouter };","map":{"version":3,"sources":["@uirouter/core/router.ts"],"names":[],"mappings":"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","sourcesContent":["import { UrlMatcherFactory } from './url/urlMatcherFactory';\nimport { UrlRouter } from './url/urlRouter';\nimport { TransitionService } from './transition/transitionService';\nimport { ViewService } from './view/view';\nimport { StateRegistry } from './state/stateRegistry';\nimport { StateService } from './state/stateService';\nimport { UIRouterGlobals } from './globals';\nimport { UIRouterPlugin, Disposable } from './interface';\nimport { values, removeFrom } from './common/common';\nimport { isFunction } from './common/predicates';\nimport { UrlService } from './url/urlService';\nimport { LocationServices, LocationConfig } from './common/coreservices';\nimport { Trace, trace } from './common/trace';\nimport { makeStub } from './common';\n\n/** @internal */\nlet _routerInstance = 0;\n\n/** @internal */\nconst locSvcFns: (keyof LocationServices)[] = ['url', 'path', 'search', 'hash', 'onChange'];\n/** @internal */\nconst locCfgFns: (keyof LocationConfig)[] = ['port', 'protocol', 'host', 'baseHref', 'html5Mode', 'hashPrefix'];\n/** @internal */\nconst locationServiceStub = makeStub<LocationServices>('LocationServices', locSvcFns);\n/** @internal */\nconst locationConfigStub = makeStub<LocationConfig>('LocationConfig', locCfgFns);\n\n/**\n * An instance of UI-Router.\n *\n * This object contains references to service APIs which define your application's routing behavior.\n */\nexport class UIRouter {\n  /** @internal */ $id = _routerInstance++;\n  /** @internal */ _disposed = false;\n  /** @internal */ private _disposables: Disposable[] = [];\n\n  /** Enable/disable tracing to the javascript console */\n  trace: Trace = trace;\n\n  /** Provides services related to ui-view synchronization */\n  viewService = new ViewService(this);\n\n  /** An object that contains global router state, such as the current state and params */\n  globals: UIRouterGlobals = new UIRouterGlobals();\n\n  /** A service that exposes global Transition Hooks */\n  transitionService: TransitionService = new TransitionService(this);\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory(this);\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlRouter: UrlRouter = new UrlRouter(this);\n\n  /** Provides services related to the URL */\n  urlService: UrlService = new UrlService(this);\n\n  /** Provides a registry for states, and related registration services */\n  stateRegistry: StateRegistry = new StateRegistry(this);\n\n  /** Provides services related to states */\n  stateService = new StateService(this);\n\n  /** @internal plugin instances are registered here */\n  private _plugins: { [key: string]: UIRouterPlugin } = {};\n\n  /** Registers an object to be notified when the router is disposed */\n  disposable(disposable: Disposable) {\n    this._disposables.push(disposable);\n  }\n\n  /**\n   * Disposes this router instance\n   *\n   * When called, clears resources retained by the router by calling `dispose(this)` on all\n   * registered [[disposable]] objects.\n   *\n   * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n   *\n   * @internal\n   * @param disposable (optional) the disposable to dispose\n   */\n  dispose(disposable?: any): void {\n    if (disposable && isFunction(disposable.dispose)) {\n      disposable.dispose(this);\n      return undefined;\n    }\n\n    this._disposed = true;\n    this._disposables.slice().forEach((d) => {\n      try {\n        typeof d.dispose === 'function' && d.dispose(this);\n        removeFrom(this._disposables, d);\n      } catch (ignored) {}\n    });\n  }\n\n  /**\n   * Creates a new `UIRouter` object\n   *\n   * @param locationService a [[LocationServices]] implementation\n   * @param locationConfig a [[LocationConfig]] implementation\n   * @internal\n   */\n  constructor(\n    public locationService: LocationServices = locationServiceStub,\n    public locationConfig: LocationConfig = locationConfigStub\n  ) {\n    this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n\n    this.disposable(this.globals);\n    this.disposable(this.stateService);\n    this.disposable(this.stateRegistry);\n    this.disposable(this.transitionService);\n    this.disposable(this.urlService);\n    this.disposable(locationService);\n    this.disposable(locationConfig);\n  }\n\n  /** Add plugin (as ES6 class) */\n  plugin<T extends UIRouterPlugin>(plugin: { new (router: UIRouter, options?: any): T }, options?: any): T;\n  /** Add plugin (as javascript constructor function) */\n  plugin<T extends UIRouterPlugin>(plugin: { (router: UIRouter, options?: any): void }, options?: any): T;\n  /** Add plugin (as javascript factory function) */\n  plugin<T extends UIRouterPlugin>(plugin: PluginFactory<T>, options?: any): T;\n  /**\n   * Adds a plugin to UI-Router\n   *\n   * This method adds a UI-Router Plugin.\n   * A plugin can enhance or change UI-Router behavior using any public API.\n   *\n   * #### Example:\n   * ```js\n   * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n   *\n   * var plugin = router.addPlugin(MyCoolPlugin);\n   * ```\n   *\n   * ### Plugin authoring\n   *\n   * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n   *\n   * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n   * For example, it may configure router options or add a Transition Hook.\n   *\n   * The plugin can then be published as a separate module.\n   *\n   * #### Example:\n   * ```js\n   * export class MyAuthPlugin implements UIRouterPlugin {\n   *   constructor(router: UIRouter, options: any) {\n   *     this.name = \"MyAuthPlugin\";\n   *     let $transitions = router.transitionService;\n   *     let $state = router.stateService;\n   *\n   *     let authCriteria = {\n   *       to: (state) => state.data && state.data.requiresAuth\n   *     };\n   *\n   *     function authHook(transition: Transition) {\n   *       let authService = transition.injector().get('AuthService');\n   *       if (!authService.isAuthenticated()) {\n   *         return $state.target('login');\n   *       }\n   *     }\n   *\n   *     $transitions.onStart(authCriteria, authHook);\n   *   }\n   * }\n   * ```\n   *\n   * @param plugin one of:\n   *        - a plugin class which implements [[UIRouterPlugin]]\n   *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n   *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n   * @param options options to pass to the plugin class/factory\n   * @returns the registered plugin instance\n   */\n  plugin<T extends UIRouterPlugin>(plugin: any, options: any = {}): T {\n    const pluginInstance = new plugin(this, options);\n    if (!pluginInstance.name) throw new Error('Required property `name` missing on plugin: ' + pluginInstance);\n    this._disposables.push(pluginInstance);\n    return (this._plugins[pluginInstance.name] = pluginInstance);\n  }\n\n  /**\n   * Returns a plugin registered with the given `pluginName`.\n   *\n   * @param pluginName the name of the plugin to get\n   * @return the plugin, or undefined\n   */\n  getPlugin(pluginName: string): UIRouterPlugin;\n  /**\n   * Returns all registered plugins\n   * @return all registered plugins\n   */\n  getPlugin(): UIRouterPlugin[];\n  getPlugin(pluginName?: string): UIRouterPlugin | UIRouterPlugin[] {\n    return pluginName ? this._plugins[pluginName] : values(this._plugins);\n  }\n}\n\n/** @internal */\nexport type PluginFactory<T> = (router: UIRouter, options?: any) => T;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}